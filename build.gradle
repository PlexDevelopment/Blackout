import java.nio.charset.StandardCharsets

plugins {
    id "java"
    id "maven-publish"
    id "net.minecrell.plugin-yml.bukkit" version "0.5.1"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "io.papermc.paperweight.userdev" version "1.3.4"
}

repositories {
    mavenLocal()
    maven {
        url = uri("https://papermc.io/repo/repository/maven-public/")
    }

    maven {
        url = uri("https://repository.apache.org/content/repositories/snapshots/")
    }

    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
    mavenCentral()
}

dependencies {
    paperweightDevelopmentBundle("io.papermc.paper:dev-bundle:1.18.1-R0.1-SNAPSHOT")

    library 'org.json:json:20211205'
    library "org.projectlombok:lombok:1.18.22"
    annotationProcessor "org.projectlombok:lombok:1.18.22"
}

group = "dev.plex"
version = "0.1-SNAPSHOT"
description = "Plex's vulnerability / exploit patcher"

bukkit {
    name = "Blackout"
    version = rootProject.version
    description = "Plex's vulnerability / exploit patcher"
    main = "dev.plex.Blackout"
    website = "https://plex.us.org"
    authors = ["Telesphoreo", "Taah"]
    apiVersion = "1.18"
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

reobfJar {
    setArchivesBaseName("Blackout")
}

tasks {
    build {
        dependsOn(reobfJar)
    }

    javadoc {
        options.memberLevel = JavadocMemberLevel.PRIVATE
    }
    assemble {
        dependsOn(reobfJar)
    }

    compileJava {
        options.encoding = StandardCharsets.UTF_8.name() // We want UTF-8 for everything

        // Set the release flag. This configures what version bytecode the compiler will emit, as well as what JDK APIs are usable.
        // See https://openjdk.java.net/jeps/247 for more information.
        options.release.set(17)
    }
    processResources {
        filteringCharset = StandardCharsets.UTF_8.name() // We want UTF-8 for everything
    }
}

